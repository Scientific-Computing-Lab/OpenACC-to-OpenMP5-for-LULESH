int main (int argc, char *argv[])
{
	unsigned N = 100, M = 200, O = 300;
	double super_long_variable_name[N][M][O];
	float ultra_long_variable_name_but_this_is_too_long[M];
	unsigned short_var, shorter, x,y,z,v;
	float and_another_insanely_long_variable_name_used_here[N];

	#pragma acc enter data copyin(super_long_variable_name[1:N][1:M][1:O]) \
	  copyin(short_var) copyin(x,y,z,v) \
	 copyin(and_another_insanely_long_variable_name_used_here[N])
#pragma omp target enter data map(to:super_long_variable_name[1:N][1:M][1:O],\
            short_var,x,y,z,v,and_another_insanely_long_variable_name_used_here[N])
// ATTENTION! The following suggested code is an alternative reference implementation
// ATTENTION! that could be used if super_long_variable_name is a non-contiguous allocated multi-dimensional array
// #pragma omp target enter data map(to:super_long_variable_name[1:N])
// for (int _idx0 = 0; _idx0 < N; ++_idx0)
// {
//   #pragma omp target enter data map(to:super_long_variable_name[1+_idx0][1:M])
//   for (int _idx1 = 0; _idx1 < M; ++_idx1)
//   {
//     #pragma omp target enter data map(to:super_long_variable_name[1+_idx0][1+_idx1][1:O])
//   }
// }

	#pragma acc exit data \
	  copyout(ultra_long_variable_name_but_this_is_too_long[N:M],shorter) \
	  copyout(and_another_insanely_long_variable_name_used_here[N])
#pragma omp target exit data\
            map(from:ultra_long_variable_name_but_this_is_too_long[N:M],shorter,\
            and_another_insanely_long_variable_name_used_here[N])
}

// Code was translated using: /nfs/pdx/home/hservatg/src/openacc2openmp.git/src/openacc2openmp.py -no-conditional-define -force-backup -keep-binding-clauses=all 0008.c
