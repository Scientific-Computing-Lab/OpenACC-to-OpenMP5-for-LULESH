       program test
       integer, parameter :: N = 1000
       integer, parameter :: M = 2000
       real v1(N), v2(N), v3(M), v4(N)
       logical condA, condB, condC

#if defined(OPENACC2OPENMP_OPENACC)
!$acc enter data copyin(v1,v2(1:N))
#endif // defined(OPENACC2OPENMP_OPENACC)
#if defined(OPENACC2OPENMP_TRANSLATED_OPENMP)
!$omp target enter data map(to:v1,v2(1:n))
#endif // defined(OPENACC2OPENMP_TRANSLATED_OPENMP)

#if defined(OPENACC2OPENMP_OPENACC)
!$acc enter data copyin(v1,v2)
!$acc& copyin(v3(2:M),v4(5))
#endif // defined(OPENACC2OPENMP_OPENACC)
#if defined(OPENACC2OPENMP_TRANSLATED_OPENMP)
!$omp target enter data map(to:v1,v2,v3(2:m),v4(5))
#endif // defined(OPENACC2OPENMP_TRANSLATED_OPENMP)

#if defined(OPENACC2OPENMP_OPENACC)
!$acc enter data copyin(v1,v2)
!$acc1 copyin(v3,v4(1:N))
#endif // defined(OPENACC2OPENMP_OPENACC)
#if defined(OPENACC2OPENMP_TRANSLATED_OPENMP)
!$omp target enter data map(to:v1,v2,v3,v4(1:n))
#endif // defined(OPENACC2OPENMP_TRANSLATED_OPENMP)

#if defined(OPENACC2OPENMP_OPENACC)
!$acc enter data copyin(v1,v2,
!$acc1 v3
!$acc2 ,v4(N:M))
#endif // defined(OPENACC2OPENMP_OPENACC)
#if defined(OPENACC2OPENMP_TRANSLATED_OPENMP)
!$omp target enter data map(to:v1,v2,v3,v4(n:m))
#endif // defined(OPENACC2OPENMP_TRANSLATED_OPENMP)

#if defined(OPENACC2OPENMP_OPENACC)
!$acc exit data copyout(v1,v2(1:N))
#endif // defined(OPENACC2OPENMP_OPENACC)
#if defined(OPENACC2OPENMP_TRANSLATED_OPENMP)
!$omp target exit data map(from:v1,v2(1:n))
#endif // defined(OPENACC2OPENMP_TRANSLATED_OPENMP)

#if defined(OPENACC2OPENMP_OPENACC)
!$acc exit data copyout(v1,v2)
!$acc& copyout(v3(2:M),v4(5))
#endif // defined(OPENACC2OPENMP_OPENACC)
#if defined(OPENACC2OPENMP_TRANSLATED_OPENMP)
!$omp target exit data map(from:v1,v2,v3(2:m),v4(5))
#endif // defined(OPENACC2OPENMP_TRANSLATED_OPENMP)

#if defined(OPENACC2OPENMP_OPENACC)
!$acc exit data copyout(v1,v2)
!$acc1 copyout(v3,v4(1:N))
#endif // defined(OPENACC2OPENMP_OPENACC)
#if defined(OPENACC2OPENMP_TRANSLATED_OPENMP)
!$omp target exit data map(from:v1,v2,v3,v4(1:n))
#endif // defined(OPENACC2OPENMP_TRANSLATED_OPENMP)

#if defined(OPENACC2OPENMP_OPENACC)
!$acc exit data copyout(v1,v2,
!$acc1 v3
!$acc2 ,v4(N:M))
#endif // defined(OPENACC2OPENMP_OPENACC)
#if defined(OPENACC2OPENMP_TRANSLATED_OPENMP)
!$omp target exit data map(from:v1,v2,v3,v4(n:m))
#endif // defined(OPENACC2OPENMP_TRANSLATED_OPENMP)

#if defined(OPENACC2OPENMP_OPENACC)
!$acc enter data copyin(v1, v2)
!$acc& create(v3, v4)
!$acc& if ((condA .and. condB)
!$acc& .or. (condA .and. condC))
#endif // defined(OPENACC2OPENMP_OPENACC)
#if defined(OPENACC2OPENMP_TRANSLATED_OPENMP)
!$omp target enter data map(to:v1,v2) map(alloc:v3,v4)
!$omp& if((conda.and.condb).or.(conda.and.condc))
#endif // defined(OPENACC2OPENMP_TRANSLATED_OPENMP)

       end program

! Code was translated using: /nfs/pdx/home/hservatg/src/intel-application-migration-tool-for-openacc-to-openmp/src/intel-application-migration-tool-for-openacc-to-openmp -force-backup -openacc-conditional-define -translated-openmp-conditional-define 0004.f
